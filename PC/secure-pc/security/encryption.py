from .interfaces import EncryptionInterface, Key

from Cryptodome.Cipher import AES
from Cryptodome.Util.Padding import pad, unpad


class AES256Encryption(EncryptionInterface):
    MODE_CBC = AES.MODE_CBC
    MODE_CFB = AES.MODE_CFB
    MODE_CTR = AES.MODE_CTR
    MODE_ECB = AES.MODE_ECB
    MODE_OFB = AES.MODE_OFB

    def __init__(self, key: Key, mode: int):
        """
        :param key: a key generated by AES256KeyManager
        :param mode: encryption mode to be used (use one of the class constants)
        """
        self.key = key
        self.mode = mode
        self.iv = None

    def encrypt(self, message: bytes, **kwargs) -> bytes:
        """
        Encrypt the message using AES-256. The message is padded
        using PKCS7
        :Keyword Arguments:
        *    *iv* (``byte string``) --
                initialization vector (for applicable modes)
                if not provided but required, a random IV is
                generated and stored as a class member
        """
        iv = kwargs.get('iv')
        cipher = AES.new(self.key, self.mode, iv=iv)
        self.iv = cipher.IV
        return cipher.encrypt(pad(message, AES.block_size))

    def decrypt(self, message: bytes, iv: bytes = None, *args, **kwargs) -> bytes:
        """
        Decrypt a message using AES-256. Message is assumed
        to be padded using PKCS7
        :Keyword Arguments:
        *    *iv* (``byte string``) --
                initialization vector (mandatory for applicable modes)
        """
        cipher = AES.new(self.key, iv)
        return unpad(cipher.decrypt(message), AES.block_size)
