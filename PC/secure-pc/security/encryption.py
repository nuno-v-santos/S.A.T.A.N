from .interfaces import EncryptionInterface, Key

from Cryptodome.Cipher import AES, PKCS1_OAEP
from Cryptodome.Util.Padding import pad, unpad


class RSAEncryption(EncryptionInterface):
    def __init__(self, key: Key):
        """
        :param key: a key generated by RSAKeyManager
        """
        self.key = key

    def encrypt(self, message: bytes, **kwargs) -> bytes:
        cipher = PKCS1_OAEP.new(self.key)
        return cipher.encrypt(message)

    def decrypt(self, message: bytes, **kwargs) -> bytes:
        cipher = PKCS1_OAEP.new(self.key)
        return cipher.decrypt(message)


class AES256Encryption(EncryptionInterface):
    MODE_CBC = AES.MODE_CBC
    MODE_CFB = AES.MODE_CFB
    MODE_CTR = AES.MODE_CTR
    MODE_ECB = AES.MODE_ECB
    MODE_OFB = AES.MODE_OFB

    def __init__(self, key: Key, mode: int):
        """
        :param key: a key generated by AES256KeyManager
        :param mode: encryption mode to be used (use one of the class constants)
        """
        self.key = key
        self.mode = mode
        self.iv = None

    def encrypt(self, message: bytes, **kwargs) -> bytes:
        """
        Encrypt the message using AES-256. The message is padded
        using PKCS7
        :Keyword Arguments:
        *    *iv* (``byte string``) --
                initialization vector (for CBC, CFB and OFB modes) - 16 bytes long
                if not provided but required, a random IV is
                generated and stored as a class member
        *    *nonce* (``byte string``) --
                a value that must not be repeated with this key
                required for CTR mode
                length must be in **[0..15]**, recommended **8**
                if not provided but required, a random nonce is
                generated and stored as a class member
        """
        iv = kwargs.get('iv')
        nonce = kwargs.get('nonce')

        if iv is not None:
            cipher = AES.new(self.key, self.mode, iv=iv)
            self.iv = cipher.IV
        elif nonce is not None:
            cipher = AES.new(self.key, self.mode, nonce=nonce)
            self.nonce = cipher.nonce
        else:
            cipher = AES.new(self.key, self.mode)

        return cipher.encrypt(pad(message, AES.block_size))

    def decrypt(self, message: bytes, iv: bytes = None, *args, **kwargs) -> bytes:
        """
        Decrypt a message using AES-256. Message is assumed
        to be padded using PKCS7
        :Keyword Arguments:
        *    *iv* (``byte string``) --
                initialization vector (for CBC, CFB and OFB modes) - 16 bytes long
        *    *nonce* (``byte string``) --
                a value that must not be repeated with this key
                required for CTR mode
                length must be in **[0..15]**, recommended **8**
        """
        nonce = kwargs.get('nonce')

        if iv is not None:
            cipher = AES.new(self.key, self.mode, iv=iv)
            self.iv = cipher.IV
        elif nonce is not None:
            cipher = AES.new(self.key, self.mode, nonce=nonce)
            self.nonce = cipher.nonce
        else:
            cipher = AES.new(self.key, self.mode)

        return unpad(cipher.decrypt(message), AES.block_size)
