#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.0a9 on Mon Dec  4 01:01:39 2017
#

import wx
from abc import ABCMeta, abstractmethod
from pubsub import pub
from securepc.util import async_publish

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

class WelcomeDialog(wx.Frame):
    def __init__(self, *args, **kwds):

        # begin wxGlade: WelcomeDialog.__init__
        wx.Frame.__init__(self, *args, **kwds)
        self.welcome_text = wx.StaticText(self, wx.ID_ANY, "")
        self.quit_button = wx.Button(self, wx.ID_ANY, "Quit")
        self.previous_button = wx.Button(self, wx.ID_ANY, "Previous")
        self.next_button = wx.Button(self, wx.ID_ANY, "Next")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        self.Bind(wx.EVT_BUTTON, self.exit, self.quit_button)
        self.Bind(wx.EVT_BUTTON, self.previous, self.previous_button)
        self.Bind(wx.EVT_BUTTON, self.next, self.next_button)

        self.state = WelcomeState(self)

    def __set_properties(self):
        # begin wxGlade: WelcomeDialog.__set_properties
        self.SetTitle("Welcome to Secure PC")
        self.previous_button.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: WelcomeDialog.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.welcome_text, 0, 0, 0)
        sizer_2.Add(self.quit_button, 0, 0, 0)
        sizer_2.Add(self.previous_button, 0, 0, 0)
        sizer_2.Add(self.next_button, 0, 0, 0)
        sizer_1.Add(sizer_2, 1, 0, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade
        self.sizer_1 = sizer_1

    @property
    def label(self):
        return self.welcome_text.GetLabel()

    @label.setter
    def label(self, text):
        self.welcome_text.SetLabel(text)

    def update_size(self):
        self.sizer_1.Fit(self)

    def exit(self, event):
        self.state.exit()

    def next(self, event):
        self.state.next()

    def previous(self, event):
        self.state.exit()

# end of class WelcomeDialog

class _State(metaclass=ABCMeta):
    @abstractmethod
    def exit(self):
        raise NotImplementedError

    @abstractmethod
    def next(self):
        raise NotImplementedError

    @abstractmethod
    def previous(self):
        raise NotImplementedError


class WelcomeState(_State):
    def __init__(self, welcome_dialog: WelcomeDialog):
        self.dialog = welcome_dialog
        self.dialog.label = (
            "Welcome to SecurePC (name pending)! Looks like this is your\n" +
            "first time starting this application. Please open the application\n" +
            "on your phone, make sure you have Bluetooth enabled on your computer,\n" +
            " and then click Next."
        )
        self.dialog.update_size()

    def exit(self):
        self.dialog.Close()

    def next(self):
        self.dialog.state = PairingState(self.dialog)

    def previous(self):
        raise RuntimeError("Can't go further back")


class PairingState(_State):
    def __init__(self, welcome_dialog: WelcomeDialog):

        self.dialog = welcome_dialog
        self.dialog.label = "Waiting for your phone to pair with this computer."
        self.dialog.next_button.Disable()
        self.dialog.previous_button.Disable()
        pub.subscribe(self.next, "pairing_done")
        async_publish("pairing_start")

    def exit(self):
        self.dialog.Close()

    def next(self):
        pass

    def previous(self):
        pass
